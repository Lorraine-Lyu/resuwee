{"ast":null,"code":"import _slicedToArray from \"/Users/lorrainelyu/Desktop/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lorrainelyu/Desktop/my-app/src/layout/leftPanel/ContactList.js\";\nimport React, { useState, Component } from 'react';\nimport { contact } from '../util';\nimport { Button, Input, Select, Form } from 'element-react';\nimport 'element-theme-default';\nimport { connect } from 'react-redux';\n\nvar ContactList = function ContactList(_ref) {\n  var dispatch = _ref.dispatch;\n  var menu = ['other', 'phone', 'facebook', 'gmail', 'linkedin', 'instagram', 'qq', 'wechat'];\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var con = new contact();\n\n  var _useState3 = useState([con]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      contactLst = _useState4[0],\n      setContactLst = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      count = _useState6[0],\n      setCount = _useState6[1];\n\n  function update(index, type, value) {\n    var c;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = contactLst[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        c = _step.value;\n\n        if (c.index === index) {\n          if (type = \"type\") {\n            c.name = value;\n          } else {\n            c.link = value;\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  function add() {\n    var newLst = contactLst.slice();\n    var c = new contact(count + 1);\n    newLst.push(c);\n    setContactLst(newLst);\n    setCount(count + 1);\n  }\n\n  function switchState() {\n    setIsOpen(!isOpen);\n  }\n\n  var input = contactLst.map(function (contact) {\n    return React.createElement(ContactUnit, {\n      menu: menu,\n      key: contact.index + 'unit',\n      value: contact,\n      callBk: update,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  });\n\n  if (!isOpen) {\n    return React.createElement(\"div\", {\n      className: \"closedContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary small\",\n      onClick: switchState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Expand\"));\n  } else {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"openedContactTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, input, React.createElement(Button, {\n      type: \"primary small\",\n      onClick: add,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Add\"), React.createElement(Button, {\n      type: \"primary small\",\n      onClick: switchState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Collapse\")));\n  }\n};\n\nfunction ContactUnit(props) {\n  var allOptions = props.menu;\n  var curr = props.value.index;\n  var update = props.callBk;\n  var options = allOptions.map(function (option, curr) {\n    if (option === curr) {\n      return React.createElement(Select.Option, {\n        value: option,\n        key: curr,\n        selected: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, option);\n    } else {\n      return React.createElement(Select.Option, {\n        value: option,\n        key: curr,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, option);\n    }\n  });\n  var select = React.createElement(Select, {\n    name: \"contactMethods\",\n    key: curr + 'select',\n    onChange: update(curr, 'type', this.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, options);\n  return React.createElement(Form.Item, {\n    className: \"contactUnit\",\n    key: this.props.index + 'div',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, select, React.createElement(Input, {\n    type: \"text\",\n    className: \"contactInput\",\n    key: curr + 'input',\n    value: this.props.value.link,\n    onChange: update(curr, 'value', this.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }));\n}\n\nfunction mapStateToProps(state) {\n  var contactLst = state.updateUser.user.contact;\n  return {\n    contactLst: contactLst\n  };\n}\n\nexport default connect(mapStateToProps)(ContactList);","map":{"version":3,"sources":["/Users/lorrainelyu/Desktop/my-app/src/layout/leftPanel/ContactList.js"],"names":["React","useState","Component","contact","Button","Input","Select","Form","connect","ContactList","dispatch","menu","isOpen","setIsOpen","con","contactLst","setContactLst","count","setCount","update","index","type","value","c","name","link","add","newLst","slice","push","switchState","input","map","ContactUnit","props","allOptions","curr","callBk","options","option","select","mapStateToProps","state","updateUser","user"],"mappings":"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","sourcesContent":["import React, { useState, Component} from 'react';\nimport {contact} from '../util';\nimport { Button, Input, Select, Form} from 'element-react';\nimport 'element-theme-default';\nimport {connect} from 'react-redux'\n\n  const ContactList = ({dispatch}) => {\n      let menu = ['other','phone','facebook', 'gmail','linkedin','instagram','qq','wechat'];\n      const [isOpen, setIsOpen] = useState(true);\n      var con = new contact();\n      const [contactLst, setContactLst] = useState([con])\n      const [count, setCount] = useState(0);\n\n      function update(index, type, value) {\n        var c;\n        for (c of contactLst) {\n          if (c.index === index) {\n            if (type = \"type\") {\n              c.name = value;\n            } else {\n              c.link = value;\n            }\n          }\n        }\n      }\n\n      function add() {\n        var newLst = contactLst.slice();\n        var c = new contact(count + 1);\n        newLst.push(c);\n        setContactLst(newLst);\n        setCount(count+1);\n      }\n      \n      function switchState() {\n        setIsOpen(!isOpen);\n      }\n\n      const input = contactLst.map((contact)=>\n        <ContactUnit menu={menu} key={contact.index+'unit'} value={contact} callBk={update}></ContactUnit>\n      );\n  \n      if(!isOpen) {\n        return(\n          <div className=\"closedContact\">\n            <Button type=\"primary small\" onClick={switchState}>Expand</Button>\n          </div>\n        )\n      } else {\n        return (\n          <div>\n            <div className=\"openedContactTitle\">\n              {input}\n              <Button type=\"primary small\" onClick={add}>Add</Button>\n              <Button type=\"primary small\" onClick={switchState}>Collapse</Button>\n            </div>\n          </div>\n        )\n      }\n\n  }\n\n  function ContactUnit (props) {\n      const allOptions = props.menu;\n      const curr = props.value.index;\n      const update = props.callBk;\n      const options = allOptions.map(function(option,curr){\n        if (option === curr) {\n          return <Select.Option value={option} key={curr} selected >{option}</Select.Option>\n        } else {\n          return <Select.Option value={option} key={curr}>{option}</Select.Option>\n        }\n      }\n  \n    )\n      const select = <Select name='contactMethods' key={curr+'select'} onChange={update(curr, 'type', this.value)}>{options}</Select>\n      return (\n        <Form.Item className=\"contactUnit\" key={this.props.index+'div'}>\n          {select} \n          <Input type=\"text\" className=\"contactInput\" key={curr+'input'} value={this.props.value.link} onChange={update(curr, 'value', this.value)}></Input>\n        </Form.Item>\n      )\n    \n  }\n\n  function mapStateToProps(state) {\n    var contactLst = state.updateUser.user.contact;\n    return {contactLst};\n  }\n\n  export default connect(mapStateToProps)(ContactList);\n"]},"metadata":{},"sourceType":"module"}